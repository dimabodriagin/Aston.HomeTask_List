package Lists;

public interface MyList<E> {

    /**
     * Добавляет указанный элемент в конец этого списка (операция
     * может не выполниться).
     *
     * @param e элемент, который должен быть добавлен к этому списку
     * @return {@code true} при успешном добавлении элемента к списку
     */
    boolean add(E e);

    /**
     * Вставляет указанный элемент в указанное место этого списка (операция
     * может не выполниться).  Сдвигает элемент,
     * находящийся в данный момент в этой позиции (если таковой имеется),
     * и все последующие элементы вправо (и увеличивает их индексы на один).
     *
     * @param element элемент, который должен быть вставлен по индексу в этот список
     * @param index   индекс, по которому указанный элемент должен быть вставлен
     */
    void add(int index, E element);

    /***
     * Удаляет элемент с указанного места из этого списка
     * (операция может не выполниться).
     *
     * @param index индекс элемента, который должен быть удален из этого списка
     * @return удаленный элемент с указанной позиции списка
     */
    E remove(int index);

    /**
     * Возвращает элемент с указанной позиции в этом списке.
     *
     * @param index индекс возвращаемого элемента
     * @return элемент с указанной позиции списка
     * @throws java.lang.IndexOutOfBoundsException если индекс выходит
     *                                             за пределы границ
     *                                             ({@code index < 0 || index >= size()})
     */
    E get(int index);

    /**
     * Заменяет элемент в указанном месте списка на указанный элемент
     * (операция может не выполниться).
     *
     * @param index   индекс элемента, который должен быть заменен
     * @param element элемент, который должен быть размещен в
     *                указанном месте
     * @return элемент, ранее находившийся в указанном месте
     * @throws java.lang.IndexOutOfBoundsException если индекс выходит
     *                                             за пределы границ
     *                                             ({@code index < 0 || index >= size()})
     */
    E set(int index, E element);


    /**
     * Возвращает новый список из части этого списка между указанными
     * fromIndex, включительно, и toIndex, исключая.
     * (Если fromIndex и toIndex равны, возвращаемый список пуст.)
     *
     * @param fromIndex наименьшая точка (включая) подсписка
     * @param toIndex наибольшая точка (исключая) подсписка
     * @return подсписок из указанного диапазона и исходного списка
     * @throws java.lang.IndexOutOfBoundsException если индекс выходит
     *                                             за пределы границ
     *                                             ({@code index < 0 || index >= size()})
     * */
    MyList<E> subList(int fromIndex, int toIndex);

    /**
     * Возвращает количество элементов в этом списке.
     *
     * @return количество элементов в списке
     */
    int size();
}
